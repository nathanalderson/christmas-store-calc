{"version":3,"sources":["util.js","ValList.js","Total.js","Buttons.js","App.js","reportWebVitals.js","index.js"],"names":["formatter","Intl","NumberFormat","style","currency","getDisplayValue","num","Math","round","toFixed","ValList","props","vals","map","className","join","Total","sum","reduce","accumulator","a","format","Button","onClick","setVals","numlist","val","display","Other","name","type","id","event","preventDefault","parseFloat","document","getElementById","value","isNaN","vs","idx","indexOf","slice","RemoveLast","Clear","ButtonArea","App","useState","rowSpan","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e569549c.chunk.js","sourcesContent":["const formatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n  // These options are needed to round to whole numbers if that's what you want.\n  // minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n  // maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n});\n\nfunction getDisplayValue(num) {\n  if (num < 1) {\n    return Math.round(num*100) + \"Â¢\";\n  } else if (num % 1 === 0) { // whole number\n    return \"$\" + num;\n  } else {\n    return \"$\" + num.toFixed(2);\n  }\n}\n\nexport {\n  formatter,\n  getDisplayValue\n}\n","import { getDisplayValue } from './util.js'\n\nfunction ValList(props) {\n  const vals = props.vals.map(num => getDisplayValue(num));\n  return (\n    <div className=\"numlist-container\">\n      <span className=\"label\">Items:</span>\n      <span className=\"output\">{ vals.join(\", \") || \"-\" }</span>\n    </div>\n  );\n}\n\nexport default ValList;\n","import { formatter } from './util.js'\n\nfunction Total(props) {\n  function add(accumulator, a) {\n    return accumulator + a;\n  }\n\n  const sum = props.vals.reduce(add, 0);\n\n  return (\n    <div className=\"total-container\">\n      <span className=\"output\">{ formatter.format(sum) }</span>\n    </div>\n  );\n}\n\nexport default Total;\n","import { getDisplayValue } from './util.js'\n\nfunction ButtonArea(props) {\n  return (\n    <div className=\"button-area\">\n      <table>\n        <tbody>\n          <tr>\n            <Button setVals={props.setVals} val={0.25} display=\"1\" />\n            <Button setVals={props.setVals} val={0.50} display=\"2\" />\n          </tr>\n          <tr>\n            <Button setVals={props.setVals} val={1} display=\"3, 4\" />\n            <Button setVals={props.setVals} val={2} display=\"5, 6\" />\n          </tr>\n          <tr>\n            <Button setVals={props.setVals} val={3} display=\"7, 8\" />\n            <Button setVals={props.setVals} val={4} display=\"9, 10\" />\n          </tr>\n          <tr>\n            <Button setVals={props.setVals} val={5} display=\"11, 12, 13\" />\n            <Button setVals={props.setVals} val={7} display=\"14, 15, 16, 17\" />\n          </tr>\n          <tr>\n            <Button setVals={props.setVals} val={10} display=\"18, 19, 20\" />\n            <Other setVals={props.setVals} />\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nfunction Button(props) {\n  return (\n    <td className=\"button number\" onClick={ () =>\n        props.setVals(numlist => [...numlist, props.val])\n    }>\n      {props.display}<br/>\n      <span className=\"value\">({getDisplayValue(props.val)})</span>\n    </td>\n  )\n}\n\nfunction Other(props) {\n  function clickAdd(event) {\n    event.preventDefault();\n    var val = parseFloat(document.getElementById(\"amount\").value);\n    if (isNaN(val)) { return; }\n    props.setVals(numlist => [...numlist, val])\n  }\n\n  function clickRemove(event) {\n    event.preventDefault();\n    var val = parseFloat(document.getElementById(\"amount\").value);\n    if (isNaN(val)) { return; }\n    props.setVals(vs => {\n      var idx = vs.indexOf(val);\n      if (idx !== -1) {\n        return [...vs.slice(0, idx), ...vs.slice(idx+1)];\n      } else {\n        return vs;\n      }\n    })\n  }\n\n  return (\n    <td className=\"other\">\n      <form>\n        <label>Amount:\n          <div className=\"dollar\">\n            <input name=\"amount\" type=\"number\" id=\"amount\" />\n          </div>\n        </label><br/>\n        <button onClick={clickAdd}>Add</button>\n        <button onClick={clickRemove}>Remove</button>\n      </form>\n    </td>\n  )\n}\n\nfunction RemoveLast(props) {\n  return (\n    <td className=\"button removelast\" onClick={ () =>\n        props.setVals(numlist => numlist.slice(0,-1))\n    }>\n      REMOVE LAST\n    </td>\n  )\n}\n\nfunction Clear(props) {\n  return (\n    <td className=\"button clear\" onClick={ () =>\n        props.setVals([])\n    }>\n      CLEAR ALL\n    </td>\n  )\n}\n\nexport default ButtonArea;\nexport {\n  Clear,\n  RemoveLast\n}\n","import './App.css';\nimport ValList from './ValList.js'\nimport Total from './Total.js'\nimport ButtonArea, {Clear, RemoveLast } from './Buttons.js'\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [vals, setVals] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <table className=\"header\">\n        <tbody>\n          <tr>\n            <td rowSpan=\"2\">\n              <ValList vals={vals} />\n              <Total  vals={vals} />\n            </td>\n            <Clear setVals={setVals}/>\n          </tr>\n          <tr>\n            <RemoveLast setVals={setVals}/>\n          </tr>\n        </tbody>\n      </table>\n      <ButtonArea setVals={setVals} />\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}