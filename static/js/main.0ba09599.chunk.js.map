{"version":3,"sources":["NumList.js","Total.js","Buttons.js","App.js","reportWebVitals.js","index.js"],"names":["NumList","props","class","numlist","join","Total","values","sum","reduce","accumulator","a","formatter","Intl","NumberFormat","style","currency","format","Button","color","onClick","updateNumlist","num","RemoveLast","colspan","slice","Clear","ButtonArea","App","useState","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ba09599.chunk.js","sourcesContent":["function NumList(props) {\n  return (\n    <div class=\"numlist-container\">\n      <span class=\"label\">Items:</span>\n      <span class=\"output\">{ props.numlist.join(\", \") || \"-\" }</span>\n    </div>\n  );\n}\n\nexport default NumList;\n","function Total(props) {\n  const values = [\n    0.25, 0.50, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 7, 7, 7, 7, 10, 10, 10\n  ];\n\n  function add(accumulator, a) {\n    return accumulator + values[a-1];\n  }\n\n  const sum = props.numlist.reduce(add, 0);\n\n  var formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    // These options are needed to round to whole numbers if that's what you want.\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n  });\n\n  return (\n    <div class=\"total-container\">\n      <span class=\"output\">{ formatter.format(sum) }</span>\n    </div>\n  );\n}\n\nexport default Total;\n","function ButtonArea(props) {\n  return (\n    <div class=\"button-area\">\n      <table>\n        <tr>\n          <Button updateNumlist={props.updateNumlist} num={1} color=\"green\"/>\n          <Button updateNumlist={props.updateNumlist} num={11} color=\"green\"/>\n        </tr>\n        <tr>\n          <Button updateNumlist={props.updateNumlist} num={2} color=\"red\"/>\n          <Button updateNumlist={props.updateNumlist} num={12} color=\"green\"/>\n        </tr>\n        <tr>\n          <Button updateNumlist={props.updateNumlist} num={3} color=\"green\"/>\n          <Button updateNumlist={props.updateNumlist} num={13} color=\"green\"/>\n        </tr>\n        <tr>\n          <Button updateNumlist={props.updateNumlist} num={4} color=\"green\"/>\n          <Button updateNumlist={props.updateNumlist} num={14} color=\"red\"/>\n        </tr>\n        <tr>\n          <Button updateNumlist={props.updateNumlist} num={5} color=\"red\"/>\n          <Button updateNumlist={props.updateNumlist} num={15} color=\"red\"/>\n        </tr>\n        <tr>\n          <Button updateNumlist={props.updateNumlist} num={6} color=\"red\"/>\n          <Button updateNumlist={props.updateNumlist} num={16} color=\"red\"/>\n        </tr>\n        <tr>\n          <Button updateNumlist={props.updateNumlist} num={7} color=\"green\"/>\n          <Button updateNumlist={props.updateNumlist} num={17} color=\"red\"/>\n        </tr>\n        <tr>\n          <Button updateNumlist={props.updateNumlist} num={8} color=\"green\"/>\n          <Button updateNumlist={props.updateNumlist} num={18} color=\"green\"/>\n        </tr>\n        <tr>\n          <Button updateNumlist={props.updateNumlist} num={9} color=\"red\"/>\n          <Button updateNumlist={props.updateNumlist} num={19} color=\"green\"/>\n        </tr>\n        <tr>\n          <Button updateNumlist={props.updateNumlist} num={10} color=\"red\"/>\n          <Button updateNumlist={props.updateNumlist} num={20} color=\"green\"/>\n        </tr>\n      </table>\n    </div>\n  );\n}\n\nfunction Button(props) {\n  return (\n    <td class={`button number ${props.color}`} onClick={ () =>\n        props.updateNumlist(numlist => [...numlist, props.num])\n    }>\n      {props.num}\n    </td>\n  )\n}\n\nfunction RemoveLast(props) {\n  return (\n    <td class=\"button removelast\" colspan=\"2\" onClick={ () =>\n        props.updateNumlist(numlist => numlist.slice(0,-1))\n    }>\n      REMOVE LAST\n    </td>\n  )\n}\n\nfunction Clear(props) {\n  return (\n    <td class=\"button clear\" colspan=\"2\" onClick={ () =>\n        props.updateNumlist([])\n    }>\n      CLEAR\n    </td>\n  )\n}\n\nexport default ButtonArea;\nexport {\n  Clear,\n  RemoveLast\n}\n","import './App.css';\nimport NumList from './NumList.js'\nimport Total from './Total.js'\nimport ButtonArea, {Clear, RemoveLast } from './Buttons.js'\nimport React, { useState, useEffect } from 'react';\n\nfunction App() {\n  const [numlist, updateNumlist] = useState([1, 2, 3]);\n\n  return (\n    <div className=\"App\">\n      <table class=\"header\">\n        <tr>\n          <Clear updateNumlist={updateNumlist}/>\n          <td class=\"not-clickable\">\n            <NumList numlist={numlist} />\n            <Total numlist={numlist} />\n          </td>\n          <RemoveLast updateNumlist={updateNumlist}/>\n        </tr>\n      </table>\n      <ButtonArea numlist={numlist} updateNumlist={updateNumlist} />\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}